---
layout: post
title: 1.1.2 警告 和 1.1.3 自底向上编程
post_id: 106
categories: ["default"]
---

{% include JB/setup %}

---

警告：重写自身的代码可能会非常难以编写和维护。你所选择的编程工具应该切合你的编程需要——它们带给你更多的便利而不是更繁琐。这里介绍的技术应该成为你工具箱中的更多工具之一，而不是唯一的工具。

自底向上编程是从Lisp世界借用过来的一个概念。其根本的思想就是从最底层开始建立抽象。先构建好最底层的结构之后，本质上你就是在基于这些抽象来构建其余的程序了。从某种意义上讲，你构建程序的过程就是在编写一种特定领域语言(domain-specific language)，然后用这种语言来实现你的程序。

此概念在ActiveRecord中极度的有用。在建立了基本的schema和model对象后，你就可以开始基于此来搭建抽象了。许多Rails 项目都是这样，在还没有编写一行controller代码，甚至在没有进行Web 界面的设计的时候，就已开始了基于模型进行抽象的工作了。

{% highlight ruby %}
class Order < ActiveRecord::Base
  has_many :line_items
  def total
    subtotal + shipping + tax
  end

  def subtotal
    line_items.sum(:price)
  end

  def shipping
    shipping_base_price + line_items.sum(:shipping)
  end

  def tax
    subtotal * TAX_RATE
  end
end
{% endhighlight %}